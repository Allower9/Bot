name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt  # ‚úÖ –î–æ–±–∞–≤–∏–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

      - name: Run tests with pytest
        run: |
          pytest -v

      - name: Check code quality
        run: |
          flake8 bot/ tests/ --count --max-line-length=127
          black --check bot/ tests/

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/telegram-bot:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/telegram-bot:latest

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "üöÄ Starting deployment..."
            
            cd /home/user1/telegram-bot
            
            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/telegram-bot:${{ github.ref_name }}
            
            # Stop and remove old container
            docker-compose down
            
            # Start new container
            docker-compose up -d
            
            # Clean up
            docker image prune -f
            
            echo "‚úÖ Deployment completed successfully!"
            docker ps
